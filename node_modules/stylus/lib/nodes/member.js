
/*!
 * Stylus - Member
 * Copyright(c) 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var Node = require('./node');
=======
var BinOp = require('./binop');
>>>>>>> bc29d8e658499236e9584f60e35438c54a1e3886

/**
 * Initialize a new `Member` with `left` and `right`.
 *
 * @param {Node} left
 * @param {Node} right
 * @api public
 */

var Member = module.exports = function Member(left, right){
<<<<<<< HEAD
  Node.call(this);
  this.left = left;
  this.right = right;
};

/**
 * Inherit from `Node.prototype`.
 */

Member.prototype.__proto__ = Node.prototype;
=======
  BinOp.call(this, '.', left, right);
};

/**
 * Inherit from `BinOp.prototype`.
 */

Member.prototype.__proto__ = BinOp.prototype;
>>>>>>> bc29d8e658499236e9584f60e35438c54a1e3886

/**
 * Return a clone of this node.
 *
 * @return {Node}
 * @api public
 */

<<<<<<< HEAD
Member.prototype.clone = function(parent){
  var clone = new Member;
  clone.left = this.left.clone(parent, clone);
  clone.right = this.right.clone(parent, clone);
  if (this.val) clone.val = this.val.clone(parent, clone);
  clone.lineno = this.lineno;
  clone.filename = this.filename;
=======
Member.prototype.clone = function(){
  var clone = BinOp.prototype.clone.call(this);
  clone.constructor = Member;
>>>>>>> bc29d8e658499236e9584f60e35438c54a1e3886
  return clone;
};

/**
<<<<<<< HEAD
 * Return a JSON representation of this node.
 *
 * @return {Object}
 * @api public
 */

Member.prototype.toJSON = function(){
  var json = {
    __type: 'Member',
    left: this.left,
    right: this.right,
    lineno: this.lineno,
    filename: this.filename
  };
  if (this.val) json.val = this.val;
  return json;
};

/**
=======
>>>>>>> bc29d8e658499236e9584f60e35438c54a1e3886
 * Return a string representation of this node.
 *
 * @return {String}
 * @api public
 */

Member.prototype.toString = function(){
  return this.left.toString()
    + '.' + this.right.toString();
};
